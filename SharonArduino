#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <DFRobotDFPlayerMini.h>
#include <SoftwareSerial.h>
#include <Stepper.h>
#include <DFRobotDFPlayerMini.h>

const int stepsPerRevolution = 2048;

Stepper myStepper(stepsPerRevolution, 14, 2, 0, 4);

SoftwareSerial mySerial(12,13); // mp3 RX, TX
DFRobotDFPlayerMini myDFPlayer;
// WiFi 네트워크 설정
const char* ssid = ".";          // 연결할 WiFi SSID
const char* password = "20051025";  // WiFi 비밀번호

// 서버 정보 설정
const char* host = "sharonproject.ddns.net";  // Node.js 서버의 IP 주소
const int port = 5522; 

void setup() {
  
  Serial.begin(115200);
  myStepper.setSpeed(10);
  mySerial.begin(9600);
  if (!myDFPlayer.begin(mySerial)) {    
    Serial.println("DFPlayer communication failed!!!!!!");
    while(true);
  } 
  Serial.print("DFPlayer Mini 가 연결되었습니다.");
  myDFPlayer.volume(5);
  
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid,password); // WiFi 접속

  // WiFi 연결 대기
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print("연결중!... \n");
  }
  Serial.println();
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  

}

void loop() {
  sendGetRequest();
  delay(20);
}

void sendGetRequest() {
   
  if (WiFi.status() == WL_CONNECTED) { // WiFi가 연결된 경우에만 요청 전송
    WiFiClient client; // WiFiClient 객체 생성
    HTTPClient http;   // HTTPClient 객체 생성

    char url[100];
    snprintf(url, sizeof(url), "http://%s:%d/ard", host, port);  // url 문자열 생성 최적화
    
    http.begin(client, url); // 변경된 begin 함수: WiFiClient와 URL 전달
    int httpCode = http.GET(); // GET 요청 전송
    delay(1);
    if (httpCode > 0) { // 요청이 정상적으로 전송된 경우
      String payload = http.getString(); // 서버로부터의 응답을 받음
      Serial.println(payload); // 응답 내용을 출력

      // 받은 데이터가 JSON 형식이라면 파싱
      StaticJsonDocument<200> doc; 
      DeserializationError error = deserializeJson(doc, payload);
      if (!error) {
        handleActivity(doc);
      } else {
        Serial.println("Failed to parse JSON");
      }
    } else {
      Serial.print("Error on HTTP request: ");
      Serial.println(httpCode);
    }
    
    http.end(); // 요청 종료
  } else {
    Serial.println("WiFi Disconnected");
  }
}

void handleActivity(JsonDocument& doc) {
  String doCode = doc["do"].as<String>();
  String voiceCode = doc["voiceCode"].as<String>();
  float voiceSpeed = doc["voiceSpeed"].as<float>();

  
    int rcode=0;
    if(doCode=="00"){
      rcode=0;
      
    }
    else if(doCode=="010"){
      rcode=1;
    }
    else if(doCode=="020"){
      rcode=2;
    }
    else if(doCode=="030"){
      rcode=3;
    }
    else if(doCode=="040"){
      rcode=4;
    }
    else if(doCode=="050"){
      rcode=5;
    }
    else if(doCode=="060"){
      rcode=6;
    }
    else if(doCode=="0240"){
      rcode=24;
    }
    else{
      rcode=404;
    }
    switch (rcode) {
      case '0':
        Serial.println("아무 행동 없음");
        myDFPlayer.playMp3Folder(4);  //test
        delay(3000);  //test
        break;
      case 1:{
        WiFiClient client; 
        HTTPClient http;
        Serial.println("게임 시작: 초기화 및 카운트다운 진행");
        char url[100];
        snprintf(url, sizeof(url), "http://%s:%d//ardIsVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);
        myDFPlayer.playMp3Folder(4); 
        
        delay(3000);
        snprintf(url, sizeof(url), "http://%s:%d//ardIsNotVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);
        break;
      }
      case 2:{
        WiFiClient client; 
        HTTPClient http;
        Serial.println("음성재생");
        char url[100];
        snprintf(url, sizeof(url), "http://%s:%d//ardIsVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);
        myDFPlayer.playMp3Folder(3);  
    
        delay(3000);
        snprintf(url, sizeof(url), "http://%s:%d//ardIsNotVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(5);
        break;
      }

      case 3:{
        Serial.println("모터를 회전하여 벽을 바라봄");
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(3000);
       
        break;
      }
      case 4:{
        Serial.println("모터를 회전하여 플레이어를 바라봄");
        
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(3000);
        break;
      }
      case 5:{
        Serial.println("제한 시간으로 인해 게임 종료");
        WiFiClient client; 
        HTTPClient http;
        
        char url[100];
        snprintf(url, sizeof(url), "http://%s:%d//ardIsVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);
        
        myDFPlayer.playMp3Folder(5);  
       
        delay(3000);
        snprintf(url, sizeof(url), "http://%s:%d//ardIsNotVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);
        break;
      }
      case 6:{
        Serial.println("남은 플레이어가 없어 게임 종료");
        WiFiClient client; 
        HTTPClient http;
        
        char url[100];
        snprintf(url, sizeof(url), "http://%s:%d//ardIsVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);

        myDFPlayer.playMp3Folder(6);  
        
        delay(2000);
        snprintf(url, sizeof(url), "http://%s:%d//ardIsNotVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);
        // 남은 플레이어가 없어서 게임 종료 로직 추가
        break;
      }
      case 24:{
        WiFiClient client; 
        HTTPClient http;
        Serial.println("음악재생,인형 플레이어를 바라봄");
        char url[100];
        snprintf(url, sizeof(url), "http://%s:%d//ardIsVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        myDFPlayer.playMp3Folder(3);  
        delay(1);
        
        
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(1);
        myStepper.step(stepsPerRevolution);
        delay(3000);

        snprintf(url, sizeof(url), "http://%s:%d//ardIsNotVoicing", host, port);
        http.begin(client, url); 
        http.GET();
        delay(1);
        break;
      }
      default:{
        Serial.println("알 수 없는 행동 코드");
        break;
      }
  }
}
